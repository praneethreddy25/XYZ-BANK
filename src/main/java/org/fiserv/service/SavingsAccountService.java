package org.fiserv.service;import jakarta.enterprise.context.ApplicationScoped;import jakarta.inject.Inject;import jakarta.transaction.Transactional;import org.eclipse.microprofile.rest.client.inject.RestClient;import org.fiserv.DTO.SavingsAccountDto;import org.fiserv.model.SavingsAccount;import org.fiserv.model.User;import org.fiserv.repository.SavingsAccountRepository;import org.fiserv.repository.UserRepository;@ApplicationScopedpublic class SavingsAccountService {    @Inject    SavingsAccountRepository savingsAccountRepository;    @Inject    UserRepository userRepository;    public boolean WithdrawMoney(Long amount, Long id) {        SavingsAccount account = savingsAccountRepository.findByUserId(id);        Long balance = account.getBalance();        if (balance >= 10000) {            if (amount >= (balance - 10000)) {                account.setBalance(account.getBalance() - amount);                savingsAccountRepository.persist(account);                return true;            }            return false;        }        return false;    }    @Transactional    public void createSavingsAccount(Long userId, SavingsAccountDto savingsAccountDto) {        try {            SavingsAccount account = new SavingsAccount();            account.setAccountNumber(savingsAccountDto.getAccountNumber());            account.setBalance(savingsAccountDto.getBalance());            System.out.println("UserId:" + userId);            User user = userRepository.findById(userId);            System.out.println("dbUserId:" + user.getUserId());            account.setUser(user);            savingsAccountRepository.persist(account);        }        catch(Exception e){              e.printStackTrace();        }    }    @Transactional    public void depositMoney(Long userId, SavingsAccountDto savingsAccountDto) {        try {            SavingsAccount account = savingsAccountRepository.findByUserId(userId);            Long currentBalance = account.getBalance();            account.setBalance(currentBalance + savingsAccountDto.getBalance());            savingsAccountRepository.persist(account);        } catch (Exception e) {            e.printStackTrace();        }    }}