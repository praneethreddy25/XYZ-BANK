package org.fiserv.resource;import jakarta.enterprise.context.ApplicationScoped;import jakarta.inject.Inject;import jakarta.ws.rs.*;import jakarta.ws.rs.core.MediaType;import jakarta.ws.rs.core.Response;import org.fiserv.DTO.SavingsAccountDto;import org.fiserv.exceptions.RecordNotFoundException;import org.fiserv.exceptions.TransactionFailedException;import org.fiserv.model.SavingsAccount;import org.fiserv.repository.SavingsAccountRepository;import org.fiserv.service.SavingsAccountService;@Path("/{userId}/savings-account")@Consumes(MediaType.APPLICATION_JSON)@Produces(MediaType.APPLICATION_JSON)//@RegisterRestClient@ApplicationScopedpublic class SavingsAccountResource {    @Inject    SavingsAccountRepository savingsAccountRepository;    @Inject    SavingsAccountService savingsAccountService;    @GET    public SavingsAccount getAccount(@PathParam("userId") Long userId) {        SavingsAccount account = savingsAccountRepository.findByUserId(userId);        if(account==null){            throw new RecordNotFoundException("You account does not exist Please create an account");        }        return account;    }    @POST    @Path("/create")    public Response createSavingsAccount(@PathParam("userId") Long userId, SavingsAccountDto savingsAccountDto) {        savingsAccountService.createSavingsAccount(userId, savingsAccountDto);        return Response.ok("Account Created Successfully").build();    }    @PATCH    @Path("/withdraw/")    public Response withDrawMoney(@PathParam("userId") Long id, SavingsAccountDto accountDto) {          if(!savingsAccountService.WithdrawMoney(accountDto.getBalance(), id)){              throw new TransactionFailedException("Insufficient Balance");          }          return Response.ok("Transaction Successful").build();    }    @PATCH    @Path("/deposit")    public Response depositMoney(@PathParam("userId") Long userId, SavingsAccountDto accountDto) {         savingsAccountService.depositMoney(userId,accountDto);         return Response.ok("Money added Successfully").build();    }}